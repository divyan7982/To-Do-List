{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\divya\\\\todo\\\\src\\\\components\\\\TaskItem.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst TaskItem = ({\n  task,\n  index,\n  editTask,\n  deleteTask,\n  toggleComplete\n}) => {\n  _s();\n  const [isEditing, setIsEditing] = useState(false);\n  const [updatedTask, setUpdatedTask] = useState(task.task);\n  const [isCompleted, setIsCompleted] = useState(task.completed);\n  const [isExpanded, setIsExpanded] = useState(false); // New state for expandable list\n\n  const handleEdit = () => {\n    if (updatedTask.trim() !== '') {\n      editTask(index, {\n        ...task,\n        task: updatedTask,\n        lastUpdate: new Date().toISOString()\n      });\n      setIsEditing(false);\n    }\n  };\n  const handleComplete = () => {\n    toggleComplete(index);\n    setIsCompleted(!isCompleted);\n  };\n  const toggleExpand = () => {\n    setIsExpanded(!isExpanded);\n  };\n  return /*#__PURE__*/_jsxDEV(\"li\", {\n    style: {\n      textDecoration: isCompleted ? 'line-through' : 'none'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: isEditing ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: updatedTask,\n          onChange: e => setUpdatedTask(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleEdit,\n          children: \"Save\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          onClick: toggleExpand,\n          style: {\n            cursor: 'pointer'\n          },\n          children: task.task\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setIsEditing(true),\n          children: \"Edit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => deleteTask(index),\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleComplete,\n          children: isCompleted ? 'Undo' : 'Done'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), isExpanded && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"task-details\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: task.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Last Updated: \", new Date(task.lastUpdate).toLocaleString()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n};\n_s(TaskItem, \"Til5MzyGW6s6UUx1Ora/wcxqf7A=\");\n_c = TaskItem;\nexport default TaskItem;\nvar _c;\n$RefreshReg$(_c, \"TaskItem\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","TaskItem","task","index","editTask","deleteTask","toggleComplete","_s","isEditing","setIsEditing","updatedTask","setUpdatedTask","isCompleted","setIsCompleted","completed","isExpanded","setIsExpanded","handleEdit","trim","lastUpdate","Date","toISOString","handleComplete","toggleExpand","style","textDecoration","children","type","value","onChange","e","target","fileName","_jsxFileName","lineNumber","columnNumber","onClick","cursor","className","description","toLocaleString","_c","$RefreshReg$"],"sources":["C:/Users/divya/todo/src/components/TaskItem.js"],"sourcesContent":["import React, { useState } from 'react';\r\n\r\nconst TaskItem = ({ task, index, editTask, deleteTask, toggleComplete }) => {\r\n  const [isEditing, setIsEditing] = useState(false);\r\n  const [updatedTask, setUpdatedTask] = useState(task.task);\r\n  const [isCompleted, setIsCompleted] = useState(task.completed);\r\n  const [isExpanded, setIsExpanded] = useState(false); // New state for expandable list\r\n\r\n  const handleEdit = () => {\r\n    if (updatedTask.trim() !== '') {\r\n      editTask(index, { ...task, task: updatedTask, lastUpdate: new Date().toISOString() });\r\n      setIsEditing(false);\r\n    }\r\n  };\r\n\r\n  const handleComplete = () => {\r\n    toggleComplete(index);\r\n    setIsCompleted(!isCompleted);\r\n  };\r\n\r\n  const toggleExpand = () => {\r\n    setIsExpanded(!isExpanded);\r\n  };\r\n\r\n  return (\r\n    <li style={{ textDecoration: isCompleted ? 'line-through' : 'none' }}>\r\n      <div>\r\n        {isEditing ? (\r\n          <>\r\n            <input\r\n              type=\"text\"\r\n              value={updatedTask}\r\n              onChange={(e) => setUpdatedTask(e.target.value)}\r\n            />\r\n            <button onClick={handleEdit}>Save</button>\r\n          </>\r\n        ) : (\r\n          <>\r\n            <span onClick={toggleExpand} style={{ cursor: 'pointer' }}>\r\n              {task.task}\r\n            </span>\r\n            <button onClick={() => setIsEditing(true)}>Edit</button>\r\n            <button onClick={() => deleteTask(index)}>Delete</button>\r\n            <button onClick={handleComplete}>\r\n              {isCompleted ? 'Undo' : 'Done'}\r\n            </button>\r\n          </>\r\n        )}\r\n      </div>\r\n      {isExpanded && (\r\n        <div className=\"task-details\">\r\n          <p>{task.description}</p>\r\n          <p>Last Updated: {new Date(task.lastUpdate).toLocaleString()}</p>\r\n        </div>\r\n      )}\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default TaskItem;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}